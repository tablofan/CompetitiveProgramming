Two Sum
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> d;
        vector<int> res;
        for (int i=0;i<nums.size();i++){
            if (d.count(target - nums[i])==1){
                return {i,d[target-nums[i]]};
            }
            d[nums[i]] = i;
        }
        return {};
    }
};

Best Time to Buy and Sell Stock
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans = prices[0];
        int res = 0;
        for (auto &i:prices){
            ans = min(ans, i);
            res = max(res, i-ans);
        }
        return res;
    }
};

Contains Duplicate
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        return unordered_set<int>(nums.begin(),nums.end()).size() != nums.size();
    }
};

Product of Array Except Self
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int p = 1;
        vector<int> ans;
        for (auto &i:nums){
            ans.push_back(p);
            p *= i;
        }
        p = 1;
        for (int i=nums.size()-1;i>-1;i--){
            ans[i] *= p;
            p *= nums[i];
        }
        return ans;
    }
};

Maximum Subarray
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int m = *max_element(nums.begin(),nums.end());
        if (m<0) return m;
        int s = 0;
        for (auto &i:nums){
            s += i;
            if (s<0){
                s = 0;
            }
            m = max(m,s);
        }
        return m;
    }
};

Maximum Product Subarray
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int m = 0;
        int p = 0;
        for (auto &i:nums){
            if (i!=0){
                if (p==0) p+=i;
                else p*=i;
            }
            else{
                p = 0;
            }
            m = max(m, p);
        }
        p = 0;
        for (auto i = nums.rbegin(); i != nums.rend(); ++i){
            if (*i!=0){
                if (p==0) p+=*i;
                else p*=*i;
            }
            else{
                p = 0;
            }
            m = max(m, p);
        }
        if (m==0){
            m = *max_element(nums.begin(),nums.end());
        }
        return m;
    }
};

Find Minimum in Rotated Sorted Array
class Solution {
public:
    int findMin(vector<int>& nums) {
        if (nums[0] < nums.back()){
            return nums[0];
        }
        int l = 0;
        int r = nums.size()-1;
        int m = (l+r)/2;
        while (nums[l]>nums[r] && r > l){
            if (m==l || m==r){
                break;
            }
            if (nums[m]>nums[r]){
                l = m;
                m = (l+r)/2;
            }
            else{
                r = m;
                m = (l+r)/2;
            }
        }
        return nums[r];
    }
};

Search in Rotated Sorted Array
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size() -1;
        while (low <= high){
            int mid = (low+high)/2;
            if (target == nums[mid]){
                return mid;
            }
            if (nums[low]<=nums[mid]){
                if (nums[low]<=target && target<=nums[mid]){
                    high = mid-1;
                }
                else{
                    low = mid +1;
                }
            }
            else{
                if (nums[mid] <= target && target <= nums[high]){
                    low = mid +1;
                }
                else{
                    high = mid-1;
                }
            }
        }
        return -1;
    }
};

3Sum
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        if (nums.size()<3){
            return {};
        }
        vector<vector<int>> res;
        sort(nums.begin(),nums.end());
        for (int i=0;i<nums.size()-2;i++){
            if (i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int l = i+1;
            int r = nums.size()-1;
            while (l<r){
                int s = nums[i] + nums[l] + nums[r];
                if (s<0){
                    l+=1;
                }
                else if (s>0){
                    r -=1;
                }
                else{
                    res.push_back({nums[i],nums[l],nums[r]});
                    while (l<r && nums[l] == nums[l+1]){
                        l+=1;
                    } 
                    while (l<r && nums[r] == nums[r-1]){
                        r -=1;
                    }
                    l+=1;
                    r-=1;
                }
            }
        }
        return res;
    }
};

Container With Most Water
class Solution {
public:
    int maxArea(vector<int>& height) {
        int m = 0;
        int i = 0;
        int j = height.size()-1;
        while (i<j){
            m = max(m, (j-i)*min(height[i],height[j]));
            if (height[i] > height[j]) j--;
            else i++;
        }
        return m;
    }
};

Sum of Two Integers
class Solution {
public:
    int getSum(int a, int b) {
        vector<int> ok;
        ok.push_back(a);
        ok.push_back(b);
        int s = accumulate(ok.begin(), ok.end(), 0);
        return s;
    }
};

Number of 1 Bits
class Solution {
public:
    int hammingWeight(uint32_t n) {
        return __builtin_popcount(n);
    }
};

Counting Bits
class Solution {
public:
    vector<int> countBits(int n) {
        vector<int> res;
        for (int i=0;i<n+1;i++){
            res.push_back(__builtin_popcount(i));
        }
        return res;
    }
};

Missing Number
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int res = nums.size();
        for(int i=0; i<nums.size(); i++){
            res ^= i;
            res ^= nums[i];
        }
        return res;
    }
};

Reverse Bits
class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        uint32_t res = 0;
        for (int i=0;i<32;i++){
            res = (res<<1)+(n>>i&1);
        }
        return res;
    }
};

Climbing Stairs
class Solution {
public:
    int f(int n, int *arr){
        if (n == 0 || n == 1) return 1;
        if (arr[n] != 0) return arr[n];
        else{
          arr[n] = f(n - 1, arr) + f(n - 2, arr);
          return arr[n];
	    }
    }

    int climbStairs(int n) {
        int *p = (int *)malloc(sizeof(int) * (n + 1));
        int res, i;
        if (n == 0 || n == 1) p[n] = 1;
        for (i = 2; i <= n; i++) p[i] = 0;
        res = f(n, p);
        free(p);
        return res;
    }
};

Coin Change
Longest Increasing Subsequence
Longest Common Subsequence
Word Break Problem
Combination Sum
House Robber
House Robber II
Decode Ways
Unique Paths
Jump Game
Clone Graph
Course Schedule
Pacific Atlantic Water Flow
Number of Islands
Longest Consecutive Sequence
Alien Dictionary (Leetcode Premium)
Graph Valid Tree (Leetcode Premium)
Number of Connected Components in an Undirected Graph (Leetcode Premium)
Insert Interval
Merge Intervals
Non-overlapping Intervals
Meeting Rooms (Leetcode Premium)
Meeting Rooms II (Leetcode Premium)
Reverse a Linked List
Detect Cycle in a Linked List
Merge Two Sorted Lists
Merge K Sorted Lists
Remove Nth Node From End Of List
Reorder List
Set Matrix Zeroes
Spiral Matrix
Rotate Image
Word Search

Longest Substring Without Repeating Characters
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int m = 0;
        string l;
        for (auto &i:s){
            int ind = l.find(i);
            if (ind== -1){
                l+=i;
            }
            else{
                string temp = l.substr(ind+1)+i;
                l = temp;
            }
            m = max(m, (int) l.length());
        }
        return m;
    }
};

Longest Repeating Character Replacement
Minimum Window Substring
Valid Anagram
Group Anagrams
Valid Parentheses
Valid Palindrome
Longest Palindromic Substring
Palindromic Substrings
Encode and Decode Strings (Leetcode Premium)
Maximum Depth of Binary Tree
Same Tree
Invert/Flip Binary Tree
Binary Tree Maximum Path Sum
Binary Tree Level Order Traversal
Serialize and Deserialize Binary Tree
Subtree of Another Tree
Construct Binary Tree from Preorder and Inorder Traversal
Validate Binary Search Tree
Kth Smallest Element in a BST
Lowest Common Ancestor of BST
Implement Trie (Prefix Tree)
Add and Search Word
Word Search II
Merge K Sorted Lists
Top K Frequent Elements
Find Median from Data Stream